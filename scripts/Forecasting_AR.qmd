---
title: "Replication of PyMC Autoregressive Forecasting for CmdStanPy"
---

```{python}
import arviz as az
import os
import numpy as np
import plotnine as gg
import pandas as pd
import matplotlib.pyplot as plt
from cmdstanpy import CmdStanModel, cmdstan_path, set_cmdstan_path

RANDOM_SEED = 123
rng = np.random.default_rng(RANDOM_SEED)
az.style.use("arviz-darkgrid")

c_light = "#DCBCBC"
c_dark = "#8F2727"

current_working_directory = 'C:\\Users\\issam_biodcm6\\Documents\\Forecasting with Structural AR Timeseries\\'
p_dir = os.path.dirname(current_working_directory)

```


```{python}
def simulate_ar(intercept, coef1, coef2, noise=0.3, *, warmup=10, steps=200):
    # We sample some extra warmup steps, to let the AR process stabilize
    draws = np.zeros(warmup + steps)
    # Initialize first draws at intercept
    draws[:2] = intercept
    for step in range(2, warmup + steps):
        draws[step] = (
            intercept
            + coef1 * draws[step - 1]
            + coef2 * draws[step - 2]
            + np.random.normal(0, noise)
        )
    # Discard the warmup draws
    return draws[warmup:]


# True parameters of the AR process
ar1_data = simulate_ar(10, -0.9, 0)

fig, ax = plt.subplots(figsize=(10, 3))
ax.set_title("Generated Autoregressive Timeseries", fontsize=15)
ax.plot(ar1_data, color=c_dark)

```


```{python}
stan_data = {
    'T': len(ar1_data),
}
```

# Prior Predictive Check
```{python}
model_path = os.path.join(p_dir, 'models', 'ar1.stan')
stan_model = CmdStanModel(stan_file=model_path)

fit = stan_model.sample(data=stan_data, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)

print(fit.diagnose())
print(fit.summary())

```

```{python}
idata_ar = az.from_cmdstanpy(posterior=fit,
                            constant_data={'T': stan_data['T']},
                            )

idata_ar
```


# Posterior Predictive Check
```{python}
stan_data_1 = {
    'T': len(ar1_data),
    'y': ar1_data,
}


```


```{python}
# Model
current_directory = os.getcwd()
model_path_1 = os.path.join(p_dir, 'models', 'ar2.stan')
stan_model_1 = CmdStanModel(stan_file=model_path_1)
```

```{python}
# Fit model
fit_1 = stan_model_1.sample(data=stan_data_1, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)

print(fit_1.diagnose())
print(fit_1.summary())
```

```{python}
idata_ar_posterior = az.from_cmdstanpy(posterior=fit_1, 
                            observed_data={'y': stan_data_1['y']},
                            constant_data={'y': stan_data_1['y'],
                                            'T': stan_data_1['T']}
                            )
az.plot_trace(idata_ar_posterior, figsize=(10, 6), kind="rank_vlines")

```

```{python}
# Perfect recovery of parameters
az.summary(idata_ar_posterior)
```

# Graph Our Posterior Predictions With Our Real Data 

```{python}
# Plotting our model's output with our data
fig, ax = plt.subplots(figsize=(10, 4))
idata_ar_posterior.posterior.y_rep.mean(["chain", "draw"]).plot(ax=ax, label="Posterior Mean AR level", color=c_light)
ax.plot(ar1_data, "o", color=c_dark, markersize=2, label="Observed Data")
ax.legend()
ax.set_title("Fitted AR process\nand observed data")

```

# Predict The Outcome For The Future 50 Time Steps 

```{python}
# Predict future values by conditionaing on passt data 
stan_data_2 = {
    'T': len(ar1_data),
    'T_pred': 50,
    'y': ar1_data,

}

# Model path
model_path_2 = os.path.join(p_dir, 'models', 'ar3.stan')
stan_model_2 = CmdStanModel(stan_file=model_path_2)

# Fit model
fit_2 = stan_model_2.sample(data=stan_data_2, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)
print(fit_2.diagnose())
print(fit_2.summary())

```

```{python}
idata_preds = az.from_cmdstanpy(
    posterior=fit_2,
    posterior_predictive="y_rep",
    predictions='y_pred',
    observed_data={'y': stan_data_2['y']},
    constant_data={'y': stan_data_2['y'],
                    'T': stan_data_2['T'],
                    'T_pred': stan_data_2['T_pred']},
)
# Plot the trace and posterior distributions
az.plot_trace(idata_preds, figsize=(10, 6), kind="rank_vlines")
idata_preds

```

# Plot The Prior Predictive Fit, The Posterior Distribution, And The Posterior Predictions

```{python}

def plot_fits(idata_ar, idata_preds):
    palette = "plasma"
    cmap = plt.get_cmap(palette)
    percs = np.linspace(51, 99, 100)
    colors = (percs - np.min(percs)) / (np.max(percs) - np.min(percs))
    mosaic = """AABB
                CCCC"""

    fig, axs = plt.subplot_mosaic(mosaic, sharex=False, figsize=(20, 10))

    axs = [axs[k] for k in axs.keys()]

    for i, p in enumerate(percs[::-1]):
        upper = np.percentile(
            az.extract(idata_ar, group="posterior", num_samples=1000)["y_sim"],
            p,
            axis=1,
        )
        lower = np.percentile(
            az.extract(idata_ar, group="posterior", num_samples=1000)["y_sim"],
            100 - p,
            axis=1,
        )
        color_val = colors[i]
        axs[0].fill_between(
            x=np.arange(idata_ar["constant_data"]["T"]),
            y1=upper.flatten(),
            y2=lower.flatten(),
            color=cmap(color_val),
            alpha=0.1,
        )

    axs[0].plot(
        az.extract(idata_ar, group="posterior", num_samples=1000)["y_sim"].mean(
            axis=1
        ),
        color="cyan",
        label="Prior Predicted Mean Realisation",
    )

    axs[0].scatter(
        x=np.arange(idata_ar["constant_data"]["T"]),
        y=idata_preds["constant_data"]["y"],
        color="k",
        label="Observed Data points",
    )
    axs[0].set_title("Prior Predictive Fit", fontsize=20)
    axs[0].legend()

    for i, p in enumerate(percs[::-1]):
        upper = np.percentile(
            az.extract(idata_preds, group="posterior_predictive", num_samples=1000)["y_rep"],
            p,
            axis=1,
        )
        lower = np.percentile(
            az.extract(idata_preds, group="posterior_predictive", num_samples=1000)["y_rep"],
            100 - p,
            axis=1,
        )
        color_val = colors[i]
        axs[2].fill_between(
            x=np.arange(idata_preds["constant_data"]["T"]),
            y1=upper.flatten(),
            y2=lower.flatten(),
            color=cmap(color_val),
            alpha=0.1,
        )

        upper = np.percentile(
            az.extract(idata_preds, group="predictions", num_samples=1000)["y_pred"],
            p,
            axis=1,
        )
        lower = np.percentile(
            az.extract(idata_preds, group="predictions", num_samples=1000)["y_pred"],
            100 - p,
            axis=1,
        )
        color_val = colors[i]
        axs[2].fill_between(
            x=np.arange(idata_preds["constant_data"]['T'] + idata_preds['constant_data']['T_pred']),
            y1=upper.flatten(),
            y2=lower.flatten(),
            color=cmap(color_val),
            alpha=0.1,
        )

    axs[2].plot(
        az.extract(idata_preds, group="posterior_predictive", num_samples=1000)["y_rep"].mean(
            axis=1
        ),
        color="cyan",
    )
    idata_preds.predictions.y_pred.mean(["chain", "draw"]).plot(
        ax=axs[2], color="cyan", label="Predicted Mean Realisation"
    )
    axs[2].scatter(
        x=np.arange(idata_ar["constant_data"]["T"]),
        y=idata_preds["constant_data"]["y"],
        color="k",
        label="Observed Data",
    )
    axs[2].set_title("Posterior Predictions Plotted", fontsize=20)
    axs[2].axvline(np.max(idata_ar["constant_data"]["T"]), color="black")
    axs[2].legend()
    axs[2].set_xlabel("Time in Days")
    axs[0].set_xlabel("Time in Days")
    az.plot_ppc(idata_preds, data_pairs={"y":"y_rep"}, ax=axs[1])


plot_fits(idata_ar, idata_preds)


```

# Now Consider The AR Process With A Trend Component

```{python}
y_t = -0.3 + np.arange(200) * -0.2 + np.random.normal(0, 10, 200)
y_t = y_t + ar1_data

fig, ax = plt.subplots(figsize=(10, 4))
ax.plot(y_t, color=c_dark)
ax.set_title("AR Process + Trend data");
```

```{python}
# Specify a new model that has as inputs the parameters for the various distributions for alpha, beta, etc.
stan_data_3_prior_0 = {
    'T': len(y_t),

    'alpha_mu': -4,
    'alpha_sigma': 0.1,

    'beta_mu': 0.2,
    'beta_sigma': 0.1,

    'init_mu': 9,
    'init_sigma': 0.1,

    'error_sigma': 8,
}
stan_data_3_prior_1 = {
    'T': len(y_t),

    'alpha_mu': -2,
    'alpha_sigma': 0.1,

    'beta_mu': 0.2,
    'beta_sigma': 0.1,

    'init_mu': 8,
    'init_sigma': 0.1,

    'error_sigma': 12,
}

stan_data_3_prior_2 = {
    'T': len(y_t),

    'alpha_mu': 0,
    'alpha_sigma': 0.1,

    'beta_mu': 0.2,
    'beta_sigma': 0.1,

    'init_mu': 8,
    'init_sigma': 0.1,

    'error_sigma': 15,
}

# Model path
model_path_3 = os.path.join(p_dir, 'models', 'ar4.stan')
stan_model_3 = CmdStanModel(stan_file=model_path_3)

models = {}
for i, p in enumerate([stan_data_3_prior_0, stan_data_3_prior_1, stan_data_3_prior_2]):
    models[i] = {}
    fit_i = stan_model_3.sample(data=p, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)

    idata = az.from_cmdstanpy(posterior=fit_i,
                            constant_data={'T': p['T']},
                            )
    models[i]["idata"] = idata
```

```{python}
fig, axs = plt.subplots(1, 3, figsize=(10, 4), sharey=True)
axs = axs.flatten()
for i, p in zip(range(3), [stan_data_3_prior_0, stan_data_3_prior_1, stan_data_3_prior_2]):
    axs[i].plot(
        az.extract(models[i]["idata"], group="posterior", num_samples=100)[
            "y_sim"
        ],
        color=c_dark,
        alpha=0.1,
    )
    axs[i].plot(y_t, "o", color='black', markersize=2)
    axs[i].set_title(
        f"$y_{{t+1}}$ = N({p['alpha_mu']} + {p['beta_mu']}y_t, {p['error_sigma']})"
    )

plt.suptitle("Prior Predictive Specifications", fontsize=20);
```

```{python}
stan_data_4_prior_0 = {
    'T': len(y_t),
    'T_pred': 50,
    'y': y_t,

    'alpha_mu': -4,
    'alpha_sigma': 0.1,

    'beta_mu': 0.2,
    'beta_sigma': 0.1,

    'init_mu': 9,
    'init_sigma': 0.1,

    'error_sigma': 8,
}

model_path_4 = os.path.join(p_dir, 'models', 'ar5.stan')
stan_model_4 = CmdStanModel(stan_file=model_path_4)

fit_4 = stan_model_4.sample(data=stan_data_4_prior_0, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)
```

```{python}
idata_preds = az.from_cmdstanpy(
    posterior=fit_4,
    posterior_predictive="y_rep",
    predictions='y_pred',
    observed_data={'y': stan_data_4_prior_0['y']},

    constant_data={'y': stan_data_4_prior_0['y'],
                    'T': stan_data_4_prior_0['T'],
                    'T_pred': stan_data_4_prior_0['T_pred']},
)
idata_preds
```

```{python}
# Model isn't capable of forecasting without a trend component
plot_fits(models[0]['idata'], idata_preds)
```


# Fit Trend Model

```{python}
# Prior predictive
stan_data_5 = {
    'T': len(y_t),

    'alpha_mu': 0.2,
    'alpha_sigma': 0.5,

    'beta_mu': 0.2,
    'beta_sigma': 0.03,

    'init_mu': -4,
    'init_sigma': 0.1,

    'error_sigma': 8,

    'trend_alpha_mu': -4,
    'trend_alpha_sigma': 0.1,

    'trend_beta_mu': -0.1,
    'trend_beta_sigma': 0.2,
}

model_path_5 = os.path.join(p_dir, 'models', 'ar7.stan')
stan_model_5 = CmdStanModel(stan_file=model_path_5)

fit_5 = stan_model_5.sample(data=stan_data_5, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)

idata_ar_trend = az.from_cmdstanpy(posterior = fit_5,
                                    constant_data={'T': stan_data_5['T']},
)
```

```{python}
# Prior Predictive and Forecast
stan_data_6 = {
    'T': len(y_t),
    'T_pred': 50,
    'y': y_t,

    'alpha_mu': 0.2,
    'alpha_sigma': 0.5,

    'beta_mu': 0.2,
    'beta_sigma': 0.03,

    'init_mu': -4,
    'init_sigma': 0.1,

    'error_sigma': 8,

    'trend_alpha_mu': -4,
    'trend_alpha_sigma': 0.1,

    'trend_beta_mu': -0.1,
    'trend_beta_sigma': 0.2,
}

model_path_6 = os.path.join(p_dir, 'models', 'ar6.stan')
stan_model_6 = CmdStanModel(stan_file=model_path_6)

fit_6 = stan_model_6.sample(data=stan_data_6, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)

idata_preds_trend = az.from_cmdstanpy(
    posterior=fit_6,
    posterior_predictive="y_rep",
    predictions='y_pred',
    observed_data={'y': stan_data_6['y']},

    constant_data={'y': stan_data_6['y'],
                    'T': stan_data_6['T'],
                    'T_pred': stan_data_6['T_pred']},
)

idata_preds_trend
```


```{python}
plot_fits(idata_ar_trend, idata_preds_trend)


```

# Now Lets Add Seasonality
```{python}
t_data = list(range(200))
n_order = 10
periods = np.array(t_data) / 7

fourier_features = pd.DataFrame(
    {
        f"{func}_order_{order}": getattr(np, func)(2 * np.pi * periods * order)
        for order in range(1, n_order + 1)
        for func in ("sin", "cos")
    }
)

y_t_s = y_t + 20 * fourier_features["sin_order_1"]

fig, ax = plt.subplots(figsize=(10, 4))
ax.plot(y_t_s, color=c_dark)
ax.set_title("AR + Trend + Seasonality")
```

```{python}
# Prior Predictive with seasonality and trend
stan_data_7 = {
    'T': len(y_t_s),
    'F': fourier_features.shape[1],

    'alpha_mu': 0.2,
    'alpha_sigma': 0.5,

    'beta_mu': 0.2,
    'beta_sigma': 0.03,

    'init_mu': -4,
    'init_sigma': 0.1,

    'error_sigma': 8,

    'trend_alpha_mu': -4,
    'trend_alpha_sigma': 0.1,

    'trend_beta_mu': -0.1,
    'trend_beta_sigma': 0.2,

    'beta_fourier_mu': 0,
    'beta_fourier_sigma': 2, 

    'fourier_features': fourier_features,
}

model_path_7 = os.path.join(p_dir, 'models', 'ar8.stan')
stan_model_7 = CmdStanModel(stan_file=model_path_7)

fit_7 = stan_model_7.sample(data=stan_data_7, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)

idata_ar_seasonality = az.from_cmdstanpy(posterior = fit_7,
                                    constant_data={'T': stan_data_5['T']},
)

```


```{python}
n = 50
n_order = 10
periods = (y_t_s.shape[0] + np.arange(n)) / 7

fourier_features_new = pd.DataFrame(
    {
        f"{func}_order_{order}": getattr(np, func)(2 * np.pi * periods * order)
        for order in range(1, n_order + 1)
        for func in ("sin", "cos")
    }
)

fourier_features_new = pd.concat([fourier_features, fourier_features_new], axis=0)

# Posterior Predictive and Forecast
stan_data_8 = {
    'T': len(y_t_s),
    'T_pred': 50,
    'F': fourier_features_new.shape[1],
    'y': y_t_s,

    'alpha_mu': 0.2,
    'alpha_sigma': 0.5,

    'beta_mu': 0.2,
    'beta_sigma': 0.03,

    'init_mu': -4,
    'init_sigma': 0.1,

    'error_sigma': 8,

    'trend_alpha_mu': -4,
    'trend_alpha_sigma': 0.1,

    'trend_beta_mu': -0.1,
    'trend_beta_sigma': 0.2,
    
    'beta_fourier_mu': 0,
    'beta_fourier_sigma': 2, 

    'fourier_features': fourier_features_new,
}



model_path_8 = os.path.join(p_dir, 'models', 'ar9.stan')
stan_model_8 = CmdStanModel(stan_file=model_path_8)

fit_8 = stan_model_8.sample(data=stan_data_8, seed=RANDOM_SEED, chains=4, iter_sampling=2000, iter_warmup=1000, show_console=True)

idata_preds_seasonality = az.from_cmdstanpy(
    posterior=fit_8,
    posterior_predictive="y_rep",
    predictions='y_pred',
    observed_data={'y': stan_data_8['y']},

    constant_data={'y': stan_data_8['y'],
                    'T': stan_data_8['T'],
                    'T_pred': stan_data_8['T_pred']},
)



```


```{python}

plot_fits(idata_ar_seasonality, idata_preds_seasonality)

```